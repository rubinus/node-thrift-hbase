//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./hbase_types');
//HELPER FUNCTIONS AND STRUCTURES

THBaseService_exists_args = function(args) {
  this.table = null;
  this.get = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.get !== undefined && args.get !== null) {
      this.get = new ttypes.TGet(args.get);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field get is unset!');
    }
  }
};
THBaseService_exists_args.prototype = {};
THBaseService_exists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.get = new ttypes.TGet();
        this.get.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_exists_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_exists_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.get !== null && this.get !== undefined) {
    output.writeFieldBegin('get', Thrift.Type.STRUCT, 2);
    this.get.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_exists_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_exists_result.prototype = {};
THBaseService_exists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_exists_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_exists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_get_args = function(args) {
  this.table = null;
  this.get = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.get !== undefined && args.get !== null) {
      this.get = new ttypes.TGet(args.get);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field get is unset!');
    }
  }
};
THBaseService_get_args.prototype = {};
THBaseService_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.get = new ttypes.TGet();
        this.get.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_get_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_get_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.get !== null && this.get !== undefined) {
    output.writeFieldBegin('get', Thrift.Type.STRUCT, 2);
    this.get.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_get_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TResult(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_get_result.prototype = {};
THBaseService_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_get_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getMultiple_args = function(args) {
  this.table = null;
  this.gets = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.gets !== undefined && args.gets !== null) {
      this.gets = Thrift.copyList(args.gets, [ttypes.TGet]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gets is unset!');
    }
  }
};
THBaseService_getMultiple_args.prototype = {};
THBaseService_getMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.gets = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.TGet();
          elem138.read(input);
          this.gets.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.gets !== null && this.gets !== undefined) {
    output.writeFieldBegin('gets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.gets.length);
    for (var iter139 in this.gets)
    {
      if (this.gets.hasOwnProperty(iter139))
      {
        iter139 = this.gets[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getMultiple_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getMultiple_result.prototype = {};
THBaseService_getMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.success = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new ttypes.TResult();
          elem146.read(input);
          this.success.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getMultiple_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter147 in this.success)
    {
      if (this.success.hasOwnProperty(iter147))
      {
        iter147 = this.success[iter147];
        iter147.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_put_args = function(args) {
  this.table = null;
  this.put = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.put !== undefined && args.put !== null) {
      this.put = new ttypes.TPut(args.put);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field put is unset!');
    }
  }
};
THBaseService_put_args.prototype = {};
THBaseService_put_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.put = new ttypes.TPut();
        this.put.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_put_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_put_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.put !== null && this.put !== undefined) {
    output.writeFieldBegin('put', Thrift.Type.STRUCT, 2);
    this.put.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_put_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_put_result.prototype = {};
THBaseService_put_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_put_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_put_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_checkAndPut_args = function(args) {
  this.table = null;
  this.row = null;
  this.family = null;
  this.qualifier = null;
  this.value = null;
  this.put = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifier is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.put !== undefined && args.put !== null) {
      this.put = new ttypes.TPut(args.put);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field put is unset!');
    }
  }
};
THBaseService_checkAndPut_args.prototype = {};
THBaseService_checkAndPut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.put = new ttypes.TPut();
        this.put.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndPut_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndPut_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 4);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.put !== null && this.put !== undefined) {
    output.writeFieldBegin('put', Thrift.Type.STRUCT, 6);
    this.put.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_checkAndPut_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_checkAndPut_result.prototype = {};
THBaseService_checkAndPut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndPut_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndPut_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_putMultiple_args = function(args) {
  this.table = null;
  this.puts = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.puts !== undefined && args.puts !== null) {
      this.puts = Thrift.copyList(args.puts, [ttypes.TPut]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field puts is unset!');
    }
  }
};
THBaseService_putMultiple_args.prototype = {};
THBaseService_putMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.puts = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = new ttypes.TPut();
          elem154.read(input);
          this.puts.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_putMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_putMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.puts !== null && this.puts !== undefined) {
    output.writeFieldBegin('puts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.puts.length);
    for (var iter155 in this.puts)
    {
      if (this.puts.hasOwnProperty(iter155))
      {
        iter155 = this.puts[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_putMultiple_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_putMultiple_result.prototype = {};
THBaseService_putMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_putMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_putMultiple_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_deleteSingle_args = function(args) {
  this.table = null;
  this.deleteSingle = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.deleteSingle !== undefined && args.deleteSingle !== null) {
      this.deleteSingle = new ttypes.TDelete(args.deleteSingle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteSingle is unset!');
    }
  }
};
THBaseService_deleteSingle_args.prototype = {};
THBaseService_deleteSingle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteSingle = new ttypes.TDelete();
        this.deleteSingle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteSingle_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteSingle_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.deleteSingle !== null && this.deleteSingle !== undefined) {
    output.writeFieldBegin('deleteSingle', Thrift.Type.STRUCT, 2);
    this.deleteSingle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_deleteSingle_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteSingle_result.prototype = {};
THBaseService_deleteSingle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteSingle_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteSingle_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_deleteMultiple_args = function(args) {
  this.table = null;
  this.deletes = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.deletes !== undefined && args.deletes !== null) {
      this.deletes = Thrift.copyList(args.deletes, [ttypes.TDelete]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deletes is unset!');
    }
  }
};
THBaseService_deleteMultiple_args.prototype = {};
THBaseService_deleteMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.deletes = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = new ttypes.TDelete();
          elem162.read(input);
          this.deletes.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.deletes !== null && this.deletes !== undefined) {
    output.writeFieldBegin('deletes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.deletes.length);
    for (var iter163 in this.deletes)
    {
      if (this.deletes.hasOwnProperty(iter163))
      {
        iter163 = this.deletes[iter163];
        iter163.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_deleteMultiple_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDelete]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteMultiple_result.prototype = {};
THBaseService_deleteMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.success = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = new ttypes.TDelete();
          elem170.read(input);
          this.success.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteMultiple_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter171 in this.success)
    {
      if (this.success.hasOwnProperty(iter171))
      {
        iter171 = this.success[iter171];
        iter171.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_checkAndDelete_args = function(args) {
  this.table = null;
  this.row = null;
  this.family = null;
  this.qualifier = null;
  this.value = null;
  this.deleteSingle = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifier is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.deleteSingle !== undefined && args.deleteSingle !== null) {
      this.deleteSingle = new ttypes.TDelete(args.deleteSingle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteSingle is unset!');
    }
  }
};
THBaseService_checkAndDelete_args.prototype = {};
THBaseService_checkAndDelete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteSingle = new ttypes.TDelete();
        this.deleteSingle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndDelete_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndDelete_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 4);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.deleteSingle !== null && this.deleteSingle !== undefined) {
    output.writeFieldBegin('deleteSingle', Thrift.Type.STRUCT, 6);
    this.deleteSingle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_checkAndDelete_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_checkAndDelete_result.prototype = {};
THBaseService_checkAndDelete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndDelete_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndDelete_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_increment_args = function(args) {
  this.table = null;
  this.increment = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.increment !== undefined && args.increment !== null) {
      this.increment = new ttypes.TIncrement(args.increment);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field increment is unset!');
    }
  }
};
THBaseService_increment_args.prototype = {};
THBaseService_increment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.increment = new ttypes.TIncrement();
        this.increment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_increment_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_increment_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.increment !== null && this.increment !== undefined) {
    output.writeFieldBegin('increment', Thrift.Type.STRUCT, 2);
    this.increment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_increment_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TResult(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_increment_result.prototype = {};
THBaseService_increment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_increment_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_increment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_append_args = function(args) {
  this.table = null;
  this.append = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.append !== undefined && args.append !== null) {
      this.append = new ttypes.TAppend(args.append);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field append is unset!');
    }
  }
};
THBaseService_append_args.prototype = {};
THBaseService_append_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.append = new ttypes.TAppend();
        this.append.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_append_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_append_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.append !== null && this.append !== undefined) {
    output.writeFieldBegin('append', Thrift.Type.STRUCT, 2);
    this.append.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_append_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TResult(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_append_result.prototype = {};
THBaseService_append_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_append_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_append_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_openScanner_args = function(args) {
  this.table = null;
  this.scan = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.scan !== undefined && args.scan !== null) {
      this.scan = new ttypes.TScan(args.scan);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scan is unset!');
    }
  }
};
THBaseService_openScanner_args.prototype = {};
THBaseService_openScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan = new ttypes.TScan();
        this.scan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_openScanner_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_openScanner_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.scan !== null && this.scan !== undefined) {
    output.writeFieldBegin('scan', Thrift.Type.STRUCT, 2);
    this.scan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_openScanner_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_openScanner_result.prototype = {};
THBaseService_openScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_openScanner_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_openScanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getScannerRows_args = function(args) {
  this.scannerId = null;
  this.numRows = 1;
  if (args) {
    if (args.scannerId !== undefined && args.scannerId !== null) {
      this.scannerId = args.scannerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scannerId is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    }
  }
};
THBaseService_getScannerRows_args.prototype = {};
THBaseService_getScannerRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scannerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerRows_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerRows_args');
  if (this.scannerId !== null && this.scannerId !== undefined) {
    output.writeFieldBegin('scannerId', Thrift.Type.I32, 1);
    output.writeI32(this.scannerId);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 2);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getScannerRows_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
THBaseService_getScannerRows_result.prototype = {};
THBaseService_getScannerRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.success = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = new ttypes.TResult();
          elem178.read(input);
          this.success.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.TIllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerRows_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter179 in this.success)
    {
      if (this.success.hasOwnProperty(iter179))
      {
        iter179 = this.success[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_closeScanner_args = function(args) {
  this.scannerId = null;
  if (args) {
    if (args.scannerId !== undefined && args.scannerId !== null) {
      this.scannerId = args.scannerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scannerId is unset!');
    }
  }
};
THBaseService_closeScanner_args.prototype = {};
THBaseService_closeScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scannerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_closeScanner_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_closeScanner_args');
  if (this.scannerId !== null && this.scannerId !== undefined) {
    output.writeFieldBegin('scannerId', Thrift.Type.I32, 1);
    output.writeI32(this.scannerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_closeScanner_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
THBaseService_closeScanner_result.prototype = {};
THBaseService_closeScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.TIllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_closeScanner_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_closeScanner_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_mutateRow_args = function(args) {
  this.table = null;
  this.rowMutations = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.rowMutations !== undefined && args.rowMutations !== null) {
      this.rowMutations = new ttypes.TRowMutations(args.rowMutations);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rowMutations is unset!');
    }
  }
};
THBaseService_mutateRow_args.prototype = {};
THBaseService_mutateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rowMutations = new ttypes.TRowMutations();
        this.rowMutations.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_mutateRow_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_mutateRow_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.rowMutations !== null && this.rowMutations !== undefined) {
    output.writeFieldBegin('rowMutations', Thrift.Type.STRUCT, 2);
    this.rowMutations.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_mutateRow_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_mutateRow_result.prototype = {};
THBaseService_mutateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_mutateRow_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_mutateRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getScannerResults_args = function(args) {
  this.table = null;
  this.scan = null;
  this.numRows = 1;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.scan !== undefined && args.scan !== null) {
      this.scan = new ttypes.TScan(args.scan);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scan is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    }
  }
};
THBaseService_getScannerResults_args.prototype = {};
THBaseService_getScannerResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan = new ttypes.TScan();
        this.scan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerResults_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerResults_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.scan !== null && this.scan !== undefined) {
    output.writeFieldBegin('scan', Thrift.Type.STRUCT, 2);
    this.scan.write(output);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseService_getScannerResults_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getScannerResults_result.prototype = {};
THBaseService_getScannerResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.success = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          elem186 = new ttypes.TResult();
          elem186.read(input);
          this.success.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerResults_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerResults_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter187 in this.success)
    {
      if (this.success.hasOwnProperty(iter187))
      {
        iter187 = this.success[iter187];
        iter187.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THBaseServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
THBaseServiceClient.prototype = {};
THBaseServiceClient.prototype.seqid = function() { return this._seqid; }
THBaseServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
THBaseServiceClient.prototype.exists = function(table, get, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exists(table, get);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exists(table, get);
  }
};

THBaseServiceClient.prototype.send_exists = function(table, get) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exists', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_exists_args();
  args.table = table;
  args.get = get;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_exists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_exists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exists failed: unknown result');
};
THBaseServiceClient.prototype.get = function(table, get, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get(table, get);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get(table, get);
  }
};

THBaseServiceClient.prototype.send_get = function(table, get) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_get_args();
  args.table = table;
  args.get = get;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
THBaseServiceClient.prototype.getMultiple = function(table, gets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMultiple(table, gets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMultiple(table, gets);
  }
};

THBaseServiceClient.prototype.send_getMultiple = function(table, gets) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMultiple', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_getMultiple_args();
  args.table = table;
  args.gets = gets;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_getMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMultiple failed: unknown result');
};
THBaseServiceClient.prototype.put = function(table, put, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_put(table, put);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_put(table, put);
  }
};

THBaseServiceClient.prototype.send_put = function(table, put) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('put', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_put_args();
  args.table = table;
  args.put = put;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_put = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_put_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
THBaseServiceClient.prototype.checkAndPut = function(table, row, family, qualifier, value, put, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkAndPut(table, row, family, qualifier, value, put);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkAndPut(table, row, family, qualifier, value, put);
  }
};

THBaseServiceClient.prototype.send_checkAndPut = function(table, row, family, qualifier, value, put) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkAndPut', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_checkAndPut_args();
  args.table = table;
  args.row = row;
  args.family = family;
  args.qualifier = qualifier;
  args.value = value;
  args.put = put;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_checkAndPut = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_checkAndPut_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndPut failed: unknown result');
};
THBaseServiceClient.prototype.putMultiple = function(table, puts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putMultiple(table, puts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putMultiple(table, puts);
  }
};

THBaseServiceClient.prototype.send_putMultiple = function(table, puts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putMultiple', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_putMultiple_args();
  args.table = table;
  args.puts = puts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_putMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_putMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
THBaseServiceClient.prototype.deleteSingle = function(table, deleteSingle, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteSingle(table, deleteSingle);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteSingle(table, deleteSingle);
  }
};

THBaseServiceClient.prototype.send_deleteSingle = function(table, deleteSingle) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteSingle', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_deleteSingle_args();
  args.table = table;
  args.deleteSingle = deleteSingle;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_deleteSingle = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteSingle_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
THBaseServiceClient.prototype.deleteMultiple = function(table, deletes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteMultiple(table, deletes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteMultiple(table, deletes);
  }
};

THBaseServiceClient.prototype.send_deleteMultiple = function(table, deletes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteMultiple', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_deleteMultiple_args();
  args.table = table;
  args.deletes = deletes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_deleteMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteMultiple failed: unknown result');
};
THBaseServiceClient.prototype.checkAndDelete = function(table, row, family, qualifier, value, deleteSingle, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkAndDelete(table, row, family, qualifier, value, deleteSingle);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkAndDelete(table, row, family, qualifier, value, deleteSingle);
  }
};

THBaseServiceClient.prototype.send_checkAndDelete = function(table, row, family, qualifier, value, deleteSingle) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkAndDelete', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_checkAndDelete_args();
  args.table = table;
  args.row = row;
  args.family = family;
  args.qualifier = qualifier;
  args.value = value;
  args.deleteSingle = deleteSingle;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_checkAndDelete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_checkAndDelete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndDelete failed: unknown result');
};
THBaseServiceClient.prototype.increment = function(table, increment, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_increment(table, increment);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_increment(table, increment);
  }
};

THBaseServiceClient.prototype.send_increment = function(table, increment) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('increment', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_increment_args();
  args.table = table;
  args.increment = increment;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_increment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_increment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('increment failed: unknown result');
};
THBaseServiceClient.prototype.append = function(table, append, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append(table, append);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append(table, append);
  }
};

THBaseServiceClient.prototype.send_append = function(table, append) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_append_args();
  args.table = table;
  args.append = append;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_append = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_append_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append failed: unknown result');
};
THBaseServiceClient.prototype.openScanner = function(table, scan, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_openScanner(table, scan);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_openScanner(table, scan);
  }
};

THBaseServiceClient.prototype.send_openScanner = function(table, scan) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('openScanner', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_openScanner_args();
  args.table = table;
  args.scan = scan;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_openScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_openScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('openScanner failed: unknown result');
};
THBaseServiceClient.prototype.getScannerRows = function(scannerId, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScannerRows(scannerId, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScannerRows(scannerId, numRows);
  }
};

THBaseServiceClient.prototype.send_getScannerRows = function(scannerId, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getScannerRows', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_getScannerRows_args();
  args.scannerId = scannerId;
  args.numRows = numRows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_getScannerRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getScannerRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScannerRows failed: unknown result');
};
THBaseServiceClient.prototype.closeScanner = function(scannerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_closeScanner(scannerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_closeScanner(scannerId);
  }
};

THBaseServiceClient.prototype.send_closeScanner = function(scannerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeScanner', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_closeScanner_args();
  args.scannerId = scannerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_closeScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_closeScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
THBaseServiceClient.prototype.mutateRow = function(table, rowMutations, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRow(table, rowMutations);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRow(table, rowMutations);
  }
};

THBaseServiceClient.prototype.send_mutateRow = function(table, rowMutations) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_mutateRow_args();
  args.table = table;
  args.rowMutations = rowMutations;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_mutateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_mutateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
THBaseServiceClient.prototype.getScannerResults = function(table, scan, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScannerResults(table, scan, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScannerResults(table, scan, numRows);
  }
};

THBaseServiceClient.prototype.send_getScannerResults = function(table, scan, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getScannerResults', Thrift.MessageType.CALL, this.seqid());
  var args = new THBaseService_getScannerResults_args();
  args.table = table;
  args.scan = scan;
  args.numRows = numRows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

THBaseServiceClient.prototype.recv_getScannerResults = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getScannerResults_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScannerResults failed: unknown result');
};
THBaseServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
THBaseServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

THBaseServiceProcessor.prototype.process_exists = function(seqid, input, output) {
  var args = new THBaseService_exists_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exists.length === 2) {
    Q.fcall(this._handler.exists, args.table, args.get)
      .then(function(result) {
        var result = new THBaseService_exists_result({success: result});
        output.writeMessageBegin("exists", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_exists_result(err);
          output.writeMessageBegin("exists", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exists", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exists(args.table, args.get, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_exists_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exists", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new THBaseService_get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get.length === 2) {
    Q.fcall(this._handler.get, args.table, args.get)
      .then(function(result) {
        var result = new THBaseService_get_result({success: result});
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_get_result(err);
          output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get(args.table, args.get, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_get_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_getMultiple = function(seqid, input, output) {
  var args = new THBaseService_getMultiple_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMultiple.length === 2) {
    Q.fcall(this._handler.getMultiple, args.table, args.gets)
      .then(function(result) {
        var result = new THBaseService_getMultiple_result({success: result});
        output.writeMessageBegin("getMultiple", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_getMultiple_result(err);
          output.writeMessageBegin("getMultiple", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMultiple", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMultiple(args.table, args.gets, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_getMultiple_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_put = function(seqid, input, output) {
  var args = new THBaseService_put_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.put.length === 2) {
    Q.fcall(this._handler.put, args.table, args.put)
      .then(function(result) {
        var result = new THBaseService_put_result({success: result});
        output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_put_result(err);
          output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("put", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.put(args.table, args.put, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_put_result((err != null ? err : {success: result}));
        output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("put", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_checkAndPut = function(seqid, input, output) {
  var args = new THBaseService_checkAndPut_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkAndPut.length === 6) {
    Q.fcall(this._handler.checkAndPut, args.table, args.row, args.family, args.qualifier, args.value, args.put)
      .then(function(result) {
        var result = new THBaseService_checkAndPut_result({success: result});
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_checkAndPut_result(err);
          output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkAndPut", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkAndPut(args.table, args.row, args.family, args.qualifier, args.value, args.put, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_checkAndPut_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_putMultiple = function(seqid, input, output) {
  var args = new THBaseService_putMultiple_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putMultiple.length === 2) {
    Q.fcall(this._handler.putMultiple, args.table, args.puts)
      .then(function(result) {
        var result = new THBaseService_putMultiple_result({success: result});
        output.writeMessageBegin("putMultiple", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_putMultiple_result(err);
          output.writeMessageBegin("putMultiple", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putMultiple", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putMultiple(args.table, args.puts, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_putMultiple_result((err != null ? err : {success: result}));
        output.writeMessageBegin("putMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_deleteSingle = function(seqid, input, output) {
  var args = new THBaseService_deleteSingle_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteSingle.length === 2) {
    Q.fcall(this._handler.deleteSingle, args.table, args.deleteSingle)
      .then(function(result) {
        var result = new THBaseService_deleteSingle_result({success: result});
        output.writeMessageBegin("deleteSingle", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_deleteSingle_result(err);
          output.writeMessageBegin("deleteSingle", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteSingle", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteSingle(args.table, args.deleteSingle, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_deleteSingle_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteSingle", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteSingle", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_deleteMultiple = function(seqid, input, output) {
  var args = new THBaseService_deleteMultiple_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteMultiple.length === 2) {
    Q.fcall(this._handler.deleteMultiple, args.table, args.deletes)
      .then(function(result) {
        var result = new THBaseService_deleteMultiple_result({success: result});
        output.writeMessageBegin("deleteMultiple", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_deleteMultiple_result(err);
          output.writeMessageBegin("deleteMultiple", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteMultiple", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteMultiple(args.table, args.deletes, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_deleteMultiple_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_checkAndDelete = function(seqid, input, output) {
  var args = new THBaseService_checkAndDelete_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkAndDelete.length === 6) {
    Q.fcall(this._handler.checkAndDelete, args.table, args.row, args.family, args.qualifier, args.value, args.deleteSingle)
      .then(function(result) {
        var result = new THBaseService_checkAndDelete_result({success: result});
        output.writeMessageBegin("checkAndDelete", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_checkAndDelete_result(err);
          output.writeMessageBegin("checkAndDelete", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkAndDelete", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkAndDelete(args.table, args.row, args.family, args.qualifier, args.value, args.deleteSingle, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_checkAndDelete_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkAndDelete", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndDelete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_increment = function(seqid, input, output) {
  var args = new THBaseService_increment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.increment.length === 2) {
    Q.fcall(this._handler.increment, args.table, args.increment)
      .then(function(result) {
        var result = new THBaseService_increment_result({success: result});
        output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_increment_result(err);
          output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("increment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.increment(args.table, args.increment, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_increment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("increment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_append = function(seqid, input, output) {
  var args = new THBaseService_append_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append.length === 2) {
    Q.fcall(this._handler.append, args.table, args.append)
      .then(function(result) {
        var result = new THBaseService_append_result({success: result});
        output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_append_result(err);
          output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("append", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.append(args.table, args.append, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_append_result((err != null ? err : {success: result}));
        output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("append", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_openScanner = function(seqid, input, output) {
  var args = new THBaseService_openScanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.openScanner.length === 2) {
    Q.fcall(this._handler.openScanner, args.table, args.scan)
      .then(function(result) {
        var result = new THBaseService_openScanner_result({success: result});
        output.writeMessageBegin("openScanner", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_openScanner_result(err);
          output.writeMessageBegin("openScanner", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("openScanner", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.openScanner(args.table, args.scan, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_openScanner_result((err != null ? err : {success: result}));
        output.writeMessageBegin("openScanner", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("openScanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_getScannerRows = function(seqid, input, output) {
  var args = new THBaseService_getScannerRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScannerRows.length === 2) {
    Q.fcall(this._handler.getScannerRows, args.scannerId, args.numRows)
      .then(function(result) {
        var result = new THBaseService_getScannerRows_result({success: result});
        output.writeMessageBegin("getScannerRows", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError || err instanceof ttypes.TIllegalArgument) {
          var result = new THBaseService_getScannerRows_result(err);
          output.writeMessageBegin("getScannerRows", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getScannerRows", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getScannerRows(args.scannerId, args.numRows, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError || err instanceof ttypes.TIllegalArgument) {
        var result = new THBaseService_getScannerRows_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getScannerRows", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScannerRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_closeScanner = function(seqid, input, output) {
  var args = new THBaseService_closeScanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.closeScanner.length === 1) {
    Q.fcall(this._handler.closeScanner, args.scannerId)
      .then(function(result) {
        var result = new THBaseService_closeScanner_result({success: result});
        output.writeMessageBegin("closeScanner", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError || err instanceof ttypes.TIllegalArgument) {
          var result = new THBaseService_closeScanner_result(err);
          output.writeMessageBegin("closeScanner", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("closeScanner", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.closeScanner(args.scannerId, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError || err instanceof ttypes.TIllegalArgument) {
        var result = new THBaseService_closeScanner_result((err != null ? err : {success: result}));
        output.writeMessageBegin("closeScanner", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("closeScanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new THBaseService_mutateRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRow.length === 2) {
    Q.fcall(this._handler.mutateRow, args.table, args.rowMutations)
      .then(function(result) {
        var result = new THBaseService_mutateRow_result({success: result});
        output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_mutateRow_result(err);
          output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutateRow", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutateRow(args.table, args.rowMutations, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_mutateRow_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

THBaseServiceProcessor.prototype.process_getScannerResults = function(seqid, input, output) {
  var args = new THBaseService_getScannerResults_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScannerResults.length === 3) {
    Q.fcall(this._handler.getScannerResults, args.table, args.scan, args.numRows)
      .then(function(result) {
        var result = new THBaseService_getScannerResults_result({success: result});
        output.writeMessageBegin("getScannerResults", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TIOError) {
          var result = new THBaseService_getScannerResults_result(err);
          output.writeMessageBegin("getScannerResults", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getScannerResults", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getScannerResults(args.table, args.scan, args.numRows, function (err, result) {
      if (err == null || err instanceof ttypes.TIOError) {
        var result = new THBaseService_getScannerResults_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getScannerResults", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScannerResults", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

